diff --git netlink.c netlink.c
index 32ea1e3..d7aa4b4 100644
--- netlink.c
+++ netlink.c
@@ -34,7 +34,8 @@ static const struct nla_policy device_policy[WGDEVICE_A_MAX + 1] = {
 	[WGDEVICE_A_H1]		= { .type = NLA_U32 },
 	[WGDEVICE_A_H2]		= { .type = NLA_U32 },
 	[WGDEVICE_A_H3]		= { .type = NLA_U32 },
-	[WGDEVICE_A_H4]		= { .type = NLA_U32 }
+	[WGDEVICE_A_H4]		= { .type = NLA_U32 },
+	[WGDEVICE_A_PEER]		= { .type = NLA_NESTED }
 };
 
 static const struct nla_policy peer_policy[WGPEER_A_MAX + 1] = {
@@ -718,10 +719,17 @@ struct genl_ops genl_ops[] = {
 #ifdef COMPAT_CANNOT_INDIVIDUAL_NETLINK_OPS_POLICY
 		.policy = device_policy,
 #endif
+		// Dummy comment to reduce fuzziness of patch file
 		.flags = GENL_UNS_ADMIN_PERM
 	}
 };
 
+static const struct genl_multicast_group wg_genl_mcgrps[] = {
+	{
+		.name = WG_MULTICAST_GROUP_AUTH
+	}
+};
+
 static struct genl_family genl_family
 #ifndef COMPAT_CANNOT_USE_GENL_NOPS
 __ro_after_init = {
@@ -737,7 +745,9 @@ __ro_after_init = {
 #ifndef COMPAT_CANNOT_INDIVIDUAL_NETLINK_OPS_POLICY
 	.policy = device_policy,
 #endif
-	.netnsok = true
+	.netnsok = true,
+	.mcgrps = wg_genl_mcgrps,
+	.n_mcgrps = ARRAY_SIZE(wg_genl_mcgrps)
 };
 
 int __init wg_genetlink_init(void)
@@ -749,3 +759,62 @@ void __exit wg_genetlink_uninit(void)
 {
 	genl_unregister_family(&genl_family);
 }
+
+int wg_genl_mcast_peer_unknown(struct wg_device *wg, const u8 pubkey[NOISE_PUBLIC_KEY_LEN],
+	                           struct endpoint *endpoint, bool advanced_security)
+{
+	struct sk_buff *skb;
+	struct nlattr *peer_nest;
+	void *hdr;
+	int ret = 0;
+
+	skb = genlmsg_new(NLMSG_GOODSIZE, GFP_KERNEL);
+	if (skb == NULL)
+		return -ENOMEM;
+
+	hdr = genlmsg_put(skb, 0, 0, &genl_family, 0, WG_CMD_UNKNOWN_PEER);
+	if (hdr == NULL) {
+		ret = -EMSGSIZE;
+		goto err;
+	}
+
+	if (nla_put_u32(skb, WGDEVICE_A_IFINDEX, wg->dev->ifindex) ||
+	    nla_put_string(skb, WGDEVICE_A_IFNAME, wg->dev->name)) {
+		ret = -EMSGSIZE;
+		goto err;
+	}
+
+	peer_nest = nla_nest_start(skb, WGDEVICE_A_PEER);
+	if (!peer_nest) {
+		ret = -EMSGSIZE;
+		goto err;
+	}
+
+	ret = nla_put(skb, WGPEER_A_PUBLIC_KEY, NOISE_PUBLIC_KEY_LEN, pubkey);
+	if (ret)
+		goto err;
+
+	if (endpoint->addr.sa_family == AF_INET)
+		ret = nla_put(skb, WGPEER_A_ENDPOINT, sizeof(endpoint->addr4), &endpoint->addr4);
+	else if (endpoint->addr.sa_family == AF_INET6)
+		ret = nla_put(skb, WGPEER_A_ENDPOINT, sizeof(endpoint->addr6), &endpoint->addr6);
+
+	if (ret)
+		goto err;
+
+	if (advanced_security) {
+		ret = nla_put_flag(skb, WGPEER_A_ADVANCED_SECURITY);
+		if (ret)
+			goto err;
+	}
+
+	nla_nest_end(skb, peer_nest);
+
+	genlmsg_end(skb, hdr);
+	ret = genlmsg_multicast_netns(&genl_family, dev_net(wg->dev), skb, 0, 0, GFP_KERNEL);
+	return ret;
+
+err:
+	nlmsg_free(skb);
+	return ret;
+}
\ No newline at end of file
diff --git netlink.h netlink.h
index 15100d9..c1ea75a 100644
--- netlink.h
+++ netlink.h
@@ -6,6 +6,11 @@
 #ifndef _WG_NETLINK_H
 #define _WG_NETLINK_H
 
+#include "peer.h"
+#include "noise.h"
+
+int wg_genl_mcast_peer_unknown(struct wg_device *wg, const u8 pubkey[NOISE_PUBLIC_KEY_LEN],
+	                           struct endpoint *endpoint, bool advanced_security);
 int wg_genetlink_init(void);
 void wg_genetlink_uninit(void);
 
diff --git noise.c noise.c
index 524c43a..e27d49b 100644
--- noise.c
+++ noise.c
@@ -9,6 +9,8 @@
 #include "messages.h"
 #include "queueing.h"
 #include "peerlookup.h"
+#include "netlink.h"
+#include "socket.h"
 
 #include <linux/rcupdate.h>
 #include <linux/slab.h>
@@ -551,10 +553,11 @@ out:
 
 struct wg_peer *
 wg_noise_handshake_consume_initiation(struct message_handshake_initiation *src,
-				      struct wg_device *wg, __le32 message_type)
+				      struct wg_device *wg, struct sk_buff *skb)
 {
 	struct wg_peer *peer = NULL, *ret_peer = NULL;
 	struct noise_handshake *handshake;
+	struct endpoint *endpoint = kzalloc(sizeof(*endpoint), GFP_KERNEL);
 	bool replay_attack, flood_attack;
 	u8 key[NOISE_SYMMETRIC_KEY_LEN];
 	u8 chaining_key[NOISE_HASH_LEN];
@@ -563,6 +566,8 @@ wg_noise_handshake_consume_initiation(struct message_handshake_initiation *src,
 	u8 e[NOISE_PUBLIC_KEY_LEN];
 	u8 t[NOISE_TIMESTAMP_LEN];
 	u64 initiation_consumption;
+	bool advanced_security = wg->advanced_security_config.advanced_security &&
+	                         (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header));
 
 	down_read(&wg->static_identity.lock);
 	if (unlikely(!wg->static_identity.has_identity))
@@ -584,9 +589,16 @@ wg_noise_handshake_consume_initiation(struct message_handshake_initiation *src,
 
 	/* Lookup which peer we're actually talking to */
 	peer = wg_pubkey_hashtable_lookup(wg->peer_hashtable, s);
-	if (!peer)
+	if (!peer) {
+		if (unlikely(wg_socket_endpoint_from_skb(endpoint, skb)))
+			goto out;
+
+		net_dbg_skb_ratelimited("%s: unknown peer from %pISpfsc\n", wg->dev->name, skb);
+		wg_genl_mcast_peer_unknown(wg, s, endpoint, advanced_security);
 		goto out;
+	}
 	handshake = &peer->handshake;
+	peer->advanced_security = advanced_security;
 
 	/* ss */
 	if (!mix_precomputed_dh(chaining_key, key,
@@ -629,8 +641,7 @@ out:
 	memzero_explicit(chaining_key, NOISE_HASH_LEN);
 	up_read(&wg->static_identity.lock);
 
-	peer->advanced_security = wg->advanced_security_config.advanced_security &&
-			(message_type == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header));
+	kfree(endpoint);
 
 	if (!ret_peer)
 		wg_peer_put(peer);
diff --git noise.h noise.h
index c20a48a..5700a14 100644
--- noise.h
+++ noise.h
@@ -121,7 +121,7 @@ wg_noise_handshake_create_initiation(struct message_handshake_initiation *dst,
 				     struct noise_handshake *handshake, u32 message_type);
 struct wg_peer *
 wg_noise_handshake_consume_initiation(struct message_handshake_initiation *src,
-				      struct wg_device *wg, __le32 message_type);
+				      struct wg_device *wg, struct sk_buff *skb);
 
 bool wg_noise_handshake_create_response(struct message_handshake_response *dst,
 					struct noise_handshake *handshake, u32 message_type);
diff --git receive.c receive.c
index 75abfa8..b3e0040 100644
--- receive.c
+++ receive.c
@@ -185,7 +185,7 @@ static void wg_receive_handshake_packet(struct wg_device *wg,
 							message->sender_index);
 			return;
 		}
-		peer = wg_noise_handshake_consume_initiation(message, wg, SKB_TYPE_LE32(skb));
+		peer = wg_noise_handshake_consume_initiation(message, wg, skb);
 		if (unlikely(!peer)) {
 			net_dbg_skb_ratelimited("%s: Invalid handshake initiation from %pISpfsc\n",
 						wg->dev->name, skb);
diff --git uapi/wireguard.h uapi/wireguard.h
index 87a124a..9d10f7c 100644
--- uapi/wireguard.h
+++ uapi/wireguard.h
@@ -129,6 +129,25 @@
  * of a peer, it likely should not be specified in subsequent fragments.
  *
  * If an error occurs, NLMSG_ERROR will reply containing an errno.
+ *
+ * WG_CMD_UNKNOWN_PEER
+ * ----------------------
+ *
+ * This command is sent on the multicast group WG_MULTICAST_GROUP_AUTH
+ * when the initiation message received from a peer with an unknown public
+ * key.
+ * The kernel will send a single message containing the
+ * following tree of nested items:
+ *
+ *    WGDEVICE_A_IFINDEX: NLA_U32
+ *    WGDEVICE_A_IFNAME: NLA_NUL_STRING, maxlen IFNAMSIZ - 1
+ *    WGDEVICE_A_PEER: NLA_NESTED
+ *        WGPEER_A_PUBLIC_KEY: NLA_EXACT_LEN, len WG_KEY_LEN
+ *        WGPEER_A_ENDPOINT: NLA_MIN_LEN(struct sockaddr), struct sockaddr_in or struct sockaddr_in6
+ *        WGPEER_A_ADVANCED_SECURITY: flag indicating that advanced security
+ *                                    techniques provided by AmneziaWG should
+ *                                    be used.
+ *
  */
 
 #ifndef _WG_UAPI_WIREGUARD_H
@@ -139,9 +158,12 @@
 
 #define WG_KEY_LEN 32
 
+#define WG_MULTICAST_GROUP_AUTH "auth"
+
 enum wg_cmd {
 	WG_CMD_GET_DEVICE,
 	WG_CMD_SET_DEVICE,
+	WG_CMD_UNKNOWN_PEER,
 	__WG_CMD_MAX
 };
 #define WG_CMD_MAX (__WG_CMD_MAX - 1)
@@ -169,6 +191,7 @@ enum wgdevice_attribute {
 	WGDEVICE_A_H2,
 	WGDEVICE_A_H3,
 	WGDEVICE_A_H4,
+	WGDEVICE_A_PEER,
 	__WGDEVICE_A_LAST
 };
 #define WGDEVICE_A_MAX (__WGDEVICE_A_LAST - 1)
@@ -179,7 +202,7 @@ enum wgpeer_flag {
 	WGPEER_F_UPDATE_ONLY = 1U << 2,
 	WGPEER_F_HAS_ADVANCED_SECURITY = 1U << 3,
 	__WGPEER_F_ALL = WGPEER_F_REMOVE_ME | WGPEER_F_REPLACE_ALLOWEDIPS |
-			 WGPEER_F_UPDATE_ONLY
+			 WGPEER_F_UPDATE_ONLY | WGPEER_F_HAS_ADVANCED_SECURITY
 };
 enum wgpeer_attribute {
 	WGPEER_A_UNSPEC,
