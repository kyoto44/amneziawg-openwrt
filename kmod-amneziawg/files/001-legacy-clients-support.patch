diff --git device.c device.c
index 98dcc34..0a32dad 100644
--- device.c
+++ device.c
@@ -485,7 +485,7 @@ int wg_device_handle_post_config(struct net_device *dev, struct amnezia_config *
 	bool a_sec_on = false;
 	int ret = 0;
 
-	if (!asc->advanced_security_enabled)
+	if (!asc->advanced_security)
 		goto out;
 
 	if (asc->junk_packet_count < 0) {
@@ -589,7 +589,7 @@ int wg_device_handle_post_config(struct net_device *dev, struct amnezia_config *
 		ret = -EINVAL;
 	}
 
-	wg->advanced_security_config.advanced_security_enabled = a_sec_on;
+	wg->advanced_security_config.advanced_security = a_sec_on;
 out:
 	return ret;
 }
diff --git device.h device.h
index ea7ffd7..9bffb47 100644
--- device.h
+++ device.h
@@ -38,7 +38,7 @@ struct prev_queue {
 };
 
 struct amnezia_config {
-	bool advanced_security_enabled;
+	bool advanced_security;
 	u16 junk_packet_count;
 	u16 junk_packet_min_size;
 	u16 junk_packet_max_size;
diff --git messages.h messages.h
index 42cd054..aa9f845 100644
--- messages.h
+++ messages.h
@@ -125,6 +125,8 @@ enum message_size {
 	MESSAGE_MAX_SIZE = 65535
 };
 
+#define SKB_TYPE_LE32(skb) (((struct message_header *)(skb)->data)->type)
+
 #define SKB_HEADER_LEN                                       \
 	(max(sizeof(struct iphdr), sizeof(struct ipv6hdr)) + \
 	 sizeof(struct udphdr) + NET_SKB_PAD)
diff --git netlink.c netlink.c
index 0f27287..f79b1a4 100644
--- netlink.c
+++ netlink.c
@@ -47,7 +47,8 @@ static const struct nla_policy peer_policy[WGPEER_A_MAX + 1] = {
 	[WGPEER_A_RX_BYTES]				= { .type = NLA_U64 },
 	[WGPEER_A_TX_BYTES]				= { .type = NLA_U64 },
 	[WGPEER_A_ALLOWEDIPS]				= { .type = NLA_NESTED },
-	[WGPEER_A_PROTOCOL_VERSION]			= { .type = NLA_U32 }
+	[WGPEER_A_PROTOCOL_VERSION]			= { .type = NLA_U32 },
+	[WGPEER_A_ADVANCED_SECURITY]    		= { .type = NLA_FLAG }
 };
 
 static const struct nla_policy allowedip_policy[WGALLOWEDIP_A_MAX + 1] = {
@@ -120,6 +121,16 @@ get_peer(struct wg_peer *peer, struct sk_buff *skb, struct dump_ctx *ctx)
 	if (!peer_nest)
 		return -EMSGSIZE;
 
+	fail = nla_put_u32(skb, WGPEER_A_FLAGS, WGPEER_F_HAS_ADVANCED_SECURITY);
+	if (fail)
+		goto err;
+
+	if (peer->advanced_security) {
+		fail = nla_put_flag(skb, WGPEER_A_ADVANCED_SECURITY);
+		if (fail)
+			goto err;
+	}
+
 	down_read(&peer->handshake.lock);
 	fail = nla_put(skb, WGPEER_A_PUBLIC_KEY, NOISE_PUBLIC_KEY_LEN,
 		       peer->handshake.remote_static);
@@ -505,6 +516,11 @@ static int set_peer(struct wg_device *wg, struct nlattr **attrs)
 			wg_packet_send_keepalive(peer);
 	}
 
+	if (flags & WGPEER_F_HAS_ADVANCED_SECURITY) {
+		peer->advanced_security = wg->advanced_security_config.advanced_security &&
+				nla_get_flag(attrs[WGPEER_A_ADVANCED_SECURITY]);
+	}
+
 	if (netif_running(wg->dev))
 		wg_packet_send_staged_packets(peer);
 
@@ -565,47 +581,47 @@ static int wg_set_device(struct sk_buff *skb, struct genl_info *info)
 	}
 
 	if (info->attrs[WGDEVICE_A_JC]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->junk_packet_count = nla_get_u16(info->attrs[WGDEVICE_A_JC]);
 	}
 
 	if (info->attrs[WGDEVICE_A_JMIN]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->junk_packet_min_size = nla_get_u16(info->attrs[WGDEVICE_A_JMIN]);
 	}
 
 	if (info->attrs[WGDEVICE_A_JMAX]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->junk_packet_max_size = nla_get_u16(info->attrs[WGDEVICE_A_JMAX]);
 	}
 
 	if (info->attrs[WGDEVICE_A_S1]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->init_packet_junk_size = nla_get_u16(info->attrs[WGDEVICE_A_S1]);
 	}
 
 	if (info->attrs[WGDEVICE_A_S2]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->response_packet_junk_size = nla_get_u16(info->attrs[WGDEVICE_A_S2]);
 	}
 
 	if (info->attrs[WGDEVICE_A_H1]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->init_packet_magic_header = nla_get_u32(info->attrs[WGDEVICE_A_H1]);
 	}
 
 	if (info->attrs[WGDEVICE_A_H2]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->response_packet_magic_header = nla_get_u32(info->attrs[WGDEVICE_A_H2]);
 	}
 
 	if (info->attrs[WGDEVICE_A_H3]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->cookie_packet_magic_header = nla_get_u32(info->attrs[WGDEVICE_A_H3]);
 	}
 
 	if (info->attrs[WGDEVICE_A_H4]) {
-		asc->advanced_security_enabled = true;
+		asc->advanced_security = true;
 		asc->transport_packet_magic_header = nla_get_u32(info->attrs[WGDEVICE_A_H4]);
 	}
 
@@ -648,6 +664,10 @@ static int wg_set_device(struct sk_buff *skb, struct genl_info *info)
 	}
 skip_set_private_key:
 
+	ret = wg_device_handle_post_config(wg->dev, asc);
+	if (ret < 0)
+		goto out;
+
 	if (info->attrs[WGDEVICE_A_PEERS]) {
 		struct nlattr *attr, *peer[WGPEER_A_MAX + 1];
 		int rem;
@@ -662,7 +682,6 @@ skip_set_private_key:
 				goto out;
 		}
 	}
-	ret = wg_device_handle_post_config(wg->dev, asc);
 
 out:
 	mutex_unlock(&wg->device_update_lock);
diff --git noise.c noise.c
index 9a4e8e0..524c43a 100644
--- noise.c
+++ noise.c
@@ -551,7 +551,7 @@ out:
 
 struct wg_peer *
 wg_noise_handshake_consume_initiation(struct message_handshake_initiation *src,
-				      struct wg_device *wg)
+				      struct wg_device *wg, __le32 message_type)
 {
 	struct wg_peer *peer = NULL, *ret_peer = NULL;
 	struct noise_handshake *handshake;
@@ -628,6 +628,10 @@ out:
 	memzero_explicit(hash, NOISE_HASH_LEN);
 	memzero_explicit(chaining_key, NOISE_HASH_LEN);
 	up_read(&wg->static_identity.lock);
+
+	peer->advanced_security = wg->advanced_security_config.advanced_security &&
+			(message_type == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header));
+
 	if (!ret_peer)
 		wg_peer_put(peer);
 	return ret_peer;
diff --git noise.h noise.h
index 300d9d4..c20a48a 100644
--- noise.h
+++ noise.h
@@ -121,7 +121,7 @@ wg_noise_handshake_create_initiation(struct message_handshake_initiation *dst,
 				     struct noise_handshake *handshake, u32 message_type);
 struct wg_peer *
 wg_noise_handshake_consume_initiation(struct message_handshake_initiation *src,
-				      struct wg_device *wg);
+				      struct wg_device *wg, __le32 message_type);
 
 bool wg_noise_handshake_create_response(struct message_handshake_response *dst,
 					struct noise_handshake *handshake, u32 message_type);
diff --git peer.c peer.c
index 1acd00a..557dc85 100644
--- peer.c
+++ peer.c
@@ -41,6 +41,7 @@ struct wg_peer *wg_peer_create(struct wg_device *wg,
 				public_key, preshared_key, peer);
 	peer->internal_id = atomic64_inc_return(&peer_counter);
 	peer->serial_work_cpu = nr_cpumask_bits;
+	peer->advanced_security = wg->advanced_security_config.advanced_security;
 	wg_cookie_init(&peer->latest_cookie);
 	wg_timers_init(peer);
 	wg_cookie_checker_precompute_peer_keys(peer);
diff --git peer.h peer.h
index 76e4d31..c6b7852 100644
--- peer.h
+++ peer.h
@@ -64,6 +64,7 @@ struct wg_peer {
 	struct list_head allowedips_list;
 	struct napi_struct napi;
 	u64 internal_id;
+	bool advanced_security;
 };
 
 struct wg_peer *wg_peer_create(struct wg_device *wg,
diff --git receive.c receive.c
index 155f81a..75abfa8 100644
--- receive.c
+++ receive.c
@@ -31,22 +31,24 @@ static void update_rx_stats(struct wg_peer *peer, size_t len)
 	put_cpu_ptr(tstats);
 }
 
-#define SKB_TYPE_LE32(skb) (((struct message_header *)(skb)->data)->type)
-
 static size_t validate_header_len(struct sk_buff *skb, struct wg_device *wg)
 {
 	if (unlikely(skb->len < sizeof(struct message_header)))
 		return 0;
-	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.transport_packet_magic_header) &&
+	if ((SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.transport_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_DATA)) &&
 	    skb->len >= MESSAGE_MINIMUM_LENGTH)
 		return sizeof(struct message_data);
-	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header) &&
+	if ((SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_INITIATION)) &&
 	    skb->len == MESSAGE_INITIATION_SIZE)
 		return MESSAGE_INITIATION_SIZE;
-	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.response_packet_magic_header) &&
+	if ((SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.response_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_RESPONSE)) &&
 	    skb->len == MESSAGE_RESPONSE_SIZE)
 		return MESSAGE_RESPONSE_SIZE;
-	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.cookie_packet_magic_header) &&
+	if ((SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.cookie_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_COOKIE)) &&
 	    skb->len == MESSAGE_COOKIE_REPLY_SIZE)
 		return MESSAGE_COOKIE_REPLY_SIZE;
 	return 0;
@@ -57,7 +59,7 @@ void prepare_advanced_secured_message(struct sk_buff *skb, struct wg_device *wg)
 	u32 assumed_type = SKB_TYPE_LE32(skb);
 	u32 assumed_offset;
 
-	if (wg->advanced_security_config.advanced_security_enabled) {
+	if (wg->advanced_security_config.advanced_security) {
 		if (skb->len == MESSAGE_INITIATION_SIZE + wg->advanced_security_config.init_packet_junk_size) {
 			assumed_type = cpu_to_le32(wg->advanced_security_config.init_packet_magic_header);
 			assumed_offset = wg->advanced_security_config.init_packet_junk_size;
@@ -142,7 +144,8 @@ static void wg_receive_handshake_packet(struct wg_device *wg,
 	bool packet_needs_cookie;
 	bool under_load;
 
-	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.cookie_packet_magic_header)) {
+	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.cookie_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_COOKIE)) {
 		net_dbg_skb_ratelimited("%s: Receiving cookie response from %pISpfsc\n",
 					wg->dev->name, skb);
 		wg_cookie_message_consume(
@@ -172,7 +175,8 @@ static void wg_receive_handshake_packet(struct wg_device *wg,
 		return;
 	}
 
-	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header)) {
+	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_INITIATION)) {
 		struct message_handshake_initiation *message =
 			(struct message_handshake_initiation *)skb->data;
 
@@ -181,7 +185,7 @@ static void wg_receive_handshake_packet(struct wg_device *wg,
 							message->sender_index);
 			return;
 		}
-		peer = wg_noise_handshake_consume_initiation(message, wg);
+		peer = wg_noise_handshake_consume_initiation(message, wg, SKB_TYPE_LE32(skb));
 		if (unlikely(!peer)) {
 			net_dbg_skb_ratelimited("%s: Invalid handshake initiation from %pISpfsc\n",
 						wg->dev->name, skb);
@@ -193,7 +197,8 @@ static void wg_receive_handshake_packet(struct wg_device *wg,
 				    &peer->endpoint.addr);
 		wg_packet_send_handshake_response(peer);
 	}
-	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.response_packet_magic_header)) {
+	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.response_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_RESPONSE)) {
 		struct message_handshake_response *message =
 			(struct message_handshake_response *)skb->data;
 
@@ -591,7 +596,10 @@ void wg_packet_receive(struct wg_device *wg, struct sk_buff *skb)
 
 	if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.init_packet_magic_header) ||
 	    SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.response_packet_magic_header) ||
-	    SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.cookie_packet_magic_header)) {
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.cookie_packet_magic_header) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_INITIATION) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_RESPONSE) ||
+	    SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_HANDSHAKE_COOKIE)) {
 		int cpu, ret = -EBUSY;
 
 		if (unlikely(!rng_is_initialized()))
@@ -614,7 +622,8 @@ drop:
 		/* Queues up a call to packet_process_queued_handshake_packets(skb): */
 		queue_work_on(cpu, wg->handshake_receive_wq,
 		              &per_cpu_ptr(wg->handshake_queue.worker, cpu)->work);
-	} else if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.transport_packet_magic_header)) {
+	} else if (SKB_TYPE_LE32(skb) == cpu_to_le32(wg->advanced_security_config.transport_packet_magic_header) ||
+	           SKB_TYPE_LE32(skb) == cpu_to_le32(MESSAGE_DATA)) {
 		PACKET_CB(skb)->ds = ip_tunnel_get_dsfield(ip_hdr(skb), skb);
 		wg_packet_consume_data(wg, skb);
 	} else {
diff --git send.c send.c
index 9dd3f1d..d65e58b 100644
--- send.c
+++ send.c
@@ -43,7 +43,7 @@ static void wg_packet_send_handshake_initiation(struct wg_peer *peer)
 			    peer->device->dev->name, peer->internal_id,
 			    &peer->endpoint.addr);
 
-	if (wg->advanced_security_config.advanced_security_enabled) {
+	if (wg->advanced_security_config.advanced_security && peer->advanced_security) {
 		junk_packet_count = wg->advanced_security_config.junk_packet_count;
 		buffer = kzalloc(wg->advanced_security_config.junk_packet_max_size, GFP_KERNEL);
 
@@ -69,16 +69,19 @@ static void wg_packet_send_handshake_initiation(struct wg_peer *peer)
 	}
 
 	net_dbg_ratelimited("%s: Initiation magic header: %llu\n",
-	                    peer->device->dev->name, wg->advanced_security_config.init_packet_magic_header);
+	                    peer->device->dev->name,
+						peer->advanced_security ? wg->advanced_security_config.init_packet_magic_header :
+						MESSAGE_HANDSHAKE_INITIATION);
 
-	if (wg_noise_handshake_create_initiation(&packet, &peer->handshake, wg->advanced_security_config.init_packet_magic_header)) {
+	if (wg_noise_handshake_create_initiation(&packet, &peer->handshake, peer->advanced_security ?
+			wg->advanced_security_config.init_packet_magic_header : MESSAGE_HANDSHAKE_INITIATION)) {
 		wg_cookie_add_mac_to_packet(&packet, sizeof(packet), peer);
 		wg_timers_any_authenticated_packet_traversal(peer);
 		wg_timers_any_authenticated_packet_sent(peer);
 		atomic64_set(&peer->last_sent_handshake,
 			     ktime_get_coarse_boottime_ns());
 
-		if (wg->advanced_security_config.advanced_security_enabled) {
+		if (wg->advanced_security_config.advanced_security && peer->advanced_security) {
 			net_dbg_ratelimited("%s: Initiation junked packet: %llu\n",
 			                    peer->device->dev->name, wg->advanced_security_config.init_packet_junk_size);
 
@@ -141,7 +144,10 @@ void wg_packet_send_handshake_response(struct wg_peer *peer)
 			    peer->device->dev->name, peer->internal_id,
 			    &peer->endpoint.addr);
 
-	if (wg_noise_handshake_create_response(&packet, &peer->handshake, wg->advanced_security_config.response_packet_magic_header)) {
+	if (wg_noise_handshake_create_response(&packet, &peer->handshake,
+		                                   peer->advanced_security ?
+		                                   wg->advanced_security_config.response_packet_magic_header :
+		                                   MESSAGE_HANDSHAKE_RESPONSE)) {
 		wg_cookie_add_mac_to_packet(&packet, sizeof(packet), peer);
 		if (wg_noise_handshake_begin_session(&peer->handshake,
 						     &peer->keypairs)) {
@@ -150,7 +156,7 @@ void wg_packet_send_handshake_response(struct wg_peer *peer)
 			wg_timers_any_authenticated_packet_sent(peer);
 			atomic64_set(&peer->last_sent_handshake,
 				     ktime_get_coarse_boottime_ns());
-			if (wg->advanced_security_config.advanced_security_enabled) {
+			if (wg->advanced_security_config.advanced_security && peer->advanced_security) {
 				wg_socket_send_junked_buffer_to_peer(peer, &packet,
 				                              sizeof(packet),
 				                              HANDSHAKE_DSCP,
@@ -172,8 +178,16 @@ void wg_packet_send_handshake_cookie(struct wg_device *wg,
 
 	net_dbg_skb_ratelimited("%s: Sending cookie response for denied handshake message for %pISpfsc\n",
 				wg->dev->name, initiating_skb);
-	wg_cookie_message_create(&packet, initiating_skb, sender_index,
-				 &wg->cookie_checker, wg->advanced_security_config.cookie_packet_magic_header);
+
+	if (SKB_TYPE_LE32(initiating_skb) == cpu_to_le32(MESSAGE_HANDSHAKE_INITIATION) ||
+	    SKB_TYPE_LE32(initiating_skb) == cpu_to_le32(MESSAGE_HANDSHAKE_RESPONSE)) {
+		wg_cookie_message_create(&packet, initiating_skb, sender_index,
+		                         &wg->cookie_checker, MESSAGE_HANDSHAKE_COOKIE);
+
+	} else {
+		wg_cookie_message_create(&packet, initiating_skb, sender_index,
+		                         &wg->cookie_checker, wg->advanced_security_config.cookie_packet_magic_header);
+	}
 	wg_socket_send_buffer_as_reply_to_skb(wg, initiating_skb, &packet,
 					      sizeof(packet));
 }
@@ -358,7 +372,8 @@ void wg_packet_encrypt_worker(struct work_struct *work)
 		skb_list_walk_safe(first, skb, next) {
 			wg = PACKET_PEER(first)->device;
 
-			if (likely(encrypt_packet(wg->advanced_security_config.transport_packet_magic_header,
+			if (likely(encrypt_packet(PACKET_PEER(first)->advanced_security ?
+						  wg->advanced_security_config.transport_packet_magic_header : MESSAGE_DATA,
 						  skb,
 						  PACKET_CB(first)->keypair,
 						  &simd_context))) {
diff --git uapi/wireguard.h uapi/wireguard.h
index f6698e8..87a124a 100644
--- uapi/wireguard.h
+++ uapi/wireguard.h
@@ -111,6 +111,9 @@
  *                                       most recent protocol will be used when
  *                                       this is unset. Otherwise, must be set
  *                                       to 1.
+ *            WGPEER_A_ADVANCED_SECURITY: flag indicating that advanced security
+ *                                       techniques provided by AmneziaWG should
+ *                                       be used.
  *        0: NLA_NESTED
  *            ...
  *        ...
@@ -174,6 +177,7 @@ enum wgpeer_flag {
 	WGPEER_F_REMOVE_ME = 1U << 0,
 	WGPEER_F_REPLACE_ALLOWEDIPS = 1U << 1,
 	WGPEER_F_UPDATE_ONLY = 1U << 2,
+	WGPEER_F_HAS_ADVANCED_SECURITY = 1U << 3,
 	__WGPEER_F_ALL = WGPEER_F_REMOVE_ME | WGPEER_F_REPLACE_ALLOWEDIPS |
 			 WGPEER_F_UPDATE_ONLY
 };
@@ -189,6 +193,7 @@ enum wgpeer_attribute {
 	WGPEER_A_TX_BYTES,
 	WGPEER_A_ALLOWEDIPS,
 	WGPEER_A_PROTOCOL_VERSION,
+	WGPEER_A_ADVANCED_SECURITY,
 	__WGPEER_A_LAST
 };
 #define WGPEER_A_MAX (__WGPEER_A_LAST - 1)
