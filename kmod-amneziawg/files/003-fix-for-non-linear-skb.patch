diff --git receive.c receive.c
index b3e0040..e42006d 100644
--- receive.c
+++ receive.c
@@ -54,10 +54,9 @@ static size_t validate_header_len(struct sk_buff *skb, struct wg_device *wg)
 	return 0;
 }
 
-void prepare_advanced_secured_message(struct sk_buff *skb, struct wg_device *wg)
+static void prepare_advanced_secured_message(struct sk_buff *skb, struct wg_device *wg)
 {
-	u32 assumed_type = SKB_TYPE_LE32(skb);
-	u32 assumed_offset;
+	u32 assumed_type, assumed_offset;
 
 	if (wg->advanced_security_config.advanced_security) {
 		if (skb->len == MESSAGE_INITIATION_SIZE + wg->advanced_security_config.init_packet_junk_size) {
@@ -72,6 +71,11 @@ void prepare_advanced_secured_message(struct sk_buff *skb, struct wg_device *wg)
 		if (unlikely(assumed_offset <= 0) || unlikely(!pskb_may_pull(skb, assumed_offset)))
 			return;
 
+		if (skb_is_nonlinear(skb) && unlikely(skb_linearize(skb))) {
+			net_dbg_skb_ratelimited("%s: non-linear sk_buff from %pISpfsc could not be linearized, dropping packet\n",
+			                        wg->dev->name, skb);
+			return;
+		}
 
 		skb_pull(skb, assumed_offset);
 
diff --git send.c send.c
index d65e58b..d6c27f1 100644
--- send.c
+++ send.c
@@ -20,7 +20,7 @@
 #include <net/udp.h>
 #include <net/sock.h>
 
-u32 wg_get_random_u32_inclusive(u32 floor, u32 ceil)
+static u32 wg_get_random_u32_inclusive(u32 floor, u32 ceil)
 {
 	u32 diff = ceil - floor + 1;
 	return floor + (get_random_u32() % diff);
@@ -68,7 +60,7 @@ static void wg_packet_send_handshake_initiation(struct wg_peer *peer)
 		kfree(buffer);
 	}
 
-	net_dbg_ratelimited("%s: Initiation magic header: %llu\n",
+	net_dbg_ratelimited("%s: Initiation magic header: %u\n",
 	                    peer->device->dev->name,
 						peer->advanced_security ? wg->advanced_security_config.init_packet_magic_header :
 						MESSAGE_HANDSHAKE_INITIATION);
